#!/bin/bash

# db-import - Git Post Checkout Hook
# This scripts import a dump of the selected database after each checkout. Can be useful to restore 
# a stored state of an application.
# Can be useful used in conjunction with db-dump hook.
#
# Author   : Edoardo Tenani < edoardo.tenani@gmail.com >
# Copyright: (c) 2011 - Edoardo Tenani
# License  : Public Domain
#
# Config
# hooks.db-hooks.path   : the path from which db dump will be imported ( use a absolute path! )
# hooks.db-hooks.uname  : the username to connect to the database
# hooks.db-hooks.passwd : the password to connect to the database
# hooks.db-hooks.dbname : the name of the database to be dumped
#
# To set a config you can use `git config hooks.db-hook.{param}`. This configs are specified
# per-project


function run() {
  # $1 => From ref
  # $2 => To ref
  # $3 => 0 for file checkout, 1 for branch checkout

  if [[ $3 -eq 1 ]]; then
    if [[ -z $(git config hooks.db-hook.path) || \
          -z $(git config hooks.db-hook.uname) || \
          -z $(git config hooks.db-hook.passwd) || \
          -z $(git config hooks.db-hook.dbname) ]]; then
      echo "[post-checkout::db-import] Invalid parameters, aborting!" 
      return
    fi

    SAVE_FOLDER=$(git config hooks.db-hook.path)

    branch=$(git br | grep "*" | cut -c3-)

  # http://stackoverflow.com/questions/229551/string-contains-in-bash/229606#229606
    if [[ ${branch} == */* ]]; then
      root_branch=$(echo ${branch} | cut -d/ -f1)
      file=$(echo ${branch} | cut -d/ -f2)

      save_file=${SAVE_FOLDER}/${root_branch}/${file}.sql
    else
      save_file=${SAVE_FOLDER}/${branch}.sql
    fi

    # Check if main branch folder exists
    if [[ ! -d $(dirname ${save_file}) ]]; then
      echo "[post-checkout::db-import] No dumps exists for this branch!" 
      return
    fi

    # Dump the database
    uname=$(git config hooks.db-hook.uname)
    passwd=$(git config hooks.db-hook.passwd)
    dbname=$(git config hooks.db-hook.dbname)
    mysql -u ${uname} -p${passwd} ${dbname} < ${save_file}

    # Check for error and commit file ( amending previous commit)
    if [[ $? -eq 0 ]]; then
      echo "[post-checkout::db-import] Successfull imported < ${save_file}"
    else
      echo "[post-checkout::db-import] Error occurred"
    fi
  fi
}

case "${1}" in
    --about )
        echo "Import a database after each checkout; the database imported is related to the name of the branch"
        ;;
    * )
        run $@
        ;;
esac
