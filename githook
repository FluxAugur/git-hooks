#!/usr/bin/env bash
#
# Copyright (c) 2010-2014, Benjamin C. Meyer <ben@meyerhome.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

function hook_dirs
{
    if [ ! -z "${1}" ] ; then
        hook="/${1}"
    else
        hook=""
    fi
    echo "${HOME}/.githook${hook}"
}

function list_hooks_in_dir
{
    path="${1}"
    level="${2}"
    find --help 2>&1 | grep -- '-L' 2>/dev/null >/dev/null
    if [ $? -eq 1 ] ; then
        find "${path}/" -mindepth ${level} -maxdepth ${level} -perm +111 -type f 2>/dev/null | grep -v "^.$" | sort
    else
        find -L "${path}/" -mindepth ${level} -maxdepth ${level} -perm +111 -type f 2>/dev/null | grep -v "^.$" | sort
    fi
}

function list_hooks
{
    esc=`echo -en "\033"`;
    cc_green="${esc}[1;32m";
    cc_red="${esc}[1;31m";
    cc_white="${esc}[1;37m";
    cc_normal="${esc}[00m";
    GITDIR=`git rev-parse --git-dir`
    if [ $? = 0 ] ; then
        echo ""
        cat "${GITDIR}/hooks/commit-msg" 2> /dev/null | grep 'githook' > /dev/null 2> /dev/null
        if [ $? = 0 ] ; then
            echo "${cc_white}Global hooks ${cc_green}ARE ${cc_white}used in this repository.${cc_normal}"
        else
            echo "${cc_white}Global hooks are ${cc_red}NOT ${cc_white}installed in this repository.${cc_normal}"
        fi
        echo ""
        echo 'Listing available hooks:'
        echo ""
        for dir in `hook_dirs`; do
            echo "${dir}:"
            for hook in `list_hooks_in_dir "${dir}" 2` ; do
                echo -n "   -> "
                echo -ne `basename \`dirname "${hook}"\``
                echo -e "/`basename "${hook}"` \t- `${hook} --about`"
                echo ""
            done
        done
    fi
}

function run_hooks
{
    dir="${1}"
    if [[ -z ${dir} || ! -d "${dir}" ]] ; then
        echo "run_hooks requires a directory name as an argument."
        return 1
    fi
    shift 1
    for hook in `list_hooks_in_dir "${dir}" 1`
    do
        export last_run_hook="${hook} $@"
        if [ ! -z ${GIT_HOOKS_VERBOSE} ] ; then
            echo -n "@@ Running hook: "
            echo -n `basename \`dirname "${hook}"\``
            echo "/`basename "${hook}"`"
        fi
        ${hook} "$@"
    done
}

function run_hook
{
    set -e
    hook=`basename "${1}"`
    if [ -z ${hook} ] ; then
        echo "run requires a hook argument"
        return 1
    fi
    shift 1
    for dir in `hook_dirs "${hook}"`; do
        if [ ! -d "${dir}" ] ; then
            continue
        fi
        run_hooks "${dir}" "$@"
    done
    set +e
}

function install_hooks_into
{
    DIR=$1
    cd "${DIR}"
    if [ -d "hooks" ] ; then
        set -e
        mv hooks hooks.old
        set +e
    fi
    mkdir hooks
    cd hooks

    if [ "$(uname)" == "Darwin" ]; then
        cmd='#!/bin/bash
githook run "$0" "$@"';
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        cmd='#!/bin/bash
githook run "$0" "$@"';
    else
        cmd='#!/bin/bash
githook.sh run "$0" "$@"';
    fi

    for file in applypatch-msg commit-msg post-applypatch post-checkout post-commit post-merge post-receive pre-applypatch pre-auto-gc pre-commit prepare-commit-msg pre-rebase pre-receive update pre-push
    do
        echo "${cmd}" > "${file}"
        chmod +x "${file}"
    done
}


function install_hooks
{
    GITDIR=`git rev-parse --git-dir`
    if [ ! $? -eq 0 ] ; then
        echo "$1 must be run inside a git repository"
        return 1
    fi
    cd "${GITDIR}"
    if [ "${1}" = "add" ] ; then
        if [ -d hooks.old ] ; then
            echo "hooks.old already exists, perhaps you already installed?"
            return 1
        fi
        install_hooks_into "${PWD}"
    else
        if [ ! -d hooks.old ] ; then
            echo "Error, hooks.old doesn't exists, aborting uninstall to not destroy something"
            return 1
        fi
        rm -rf hooks
        mv hooks.old hooks
    fi
    return 0
}

function install_global 
{
    TEMPLATE="$HOME/.githook/templates"
    mkdir -p "${TEMPLATE}"
    install_hooks_into "${TEMPLATE}"
    git config --global init.templatedir "${TEMPLATE}"
    echo "Git global config init.templatedir is now set to ${TEMPLATE}"
}

function uninstall_global 
{
    git config --global --unset init.templatedir
}

function report_error 
{
    echo "Hook failed: $last_run_hook"
    exit 1

}

case $1 in
    run )
        if [ ! -z "${GIT_DIR}" ] ; then
            unset GIT_DIR
        fi
        shift
        trap report_error ERR
        run_hook "$@"
        ;;
    add|remove )
        install_hooks "$1"
        ;;
    add-global )
        install_global
        ;;
    remove-global )
        uninstall_global
        ;;
    help|-h|--help|-? )
        echo 'Git Hooks'
        echo '    A tool to manage project, user, and global Git hooks for multiple git repositories.'
        echo '    https://github.com/SDW-CC/git-hooks'
        echo ''
        echo 'Options:'
        echo '    add            Replace existing hooks in this repository with a call to'
        echo '                   ''githook run [hook]''.  Moves old hooks directory to hooks.old'
        echo '    remove         Remove existing hooks in this repository and rename hooks.old'
        echo '                   back to hooks'
        echo '    add-global     Changes the hook templates directory to $HOME/.githook/templates'
        echo '                   and creates hooks with a call to ''githook run [hook]''.'
        echo '                   This directory is then used to generate hooks when you init or clone'
        echo '    remove-global  Resets the hook template directory to dafault'
        echo '    run <cmd>      Run the hooks for <cmd> (such as pre-commit)'
        echo '    help           Displays a list of options'
        echo '    (no arguments) Show currently available hooks'
        ;;
    * )
        list_hooks
        ;;
esac
